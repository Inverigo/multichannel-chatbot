const TelegramBot = require('node-telegram-bot-api');
const DatabaseService = require('./database');

class TelegramChannelService {
  constructor() {
    this.bot = null;
    this.channelId = process.env.TELEGRAM_CHANNEL;
    this.properties = new Map();
  }

  async initialize() {
    try {
      // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
      this.bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞
      this.setupChannelHandlers();
      
      console.log('‚úÖ Telegram –∫–∞–Ω–∞–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∫–∞–Ω–∞–ª–∞:', error);
    }
  }

  setupChannelHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ
    this.bot.on('channel_post', (msg) => {
      this.processChannelMessage(msg);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞
    this.bot.on('edited_channel_post', (msg) => {
      this.processChannelMessage(msg);
    });
  }

  async processChannelMessage(msg) {
    try {
      if (!msg.text) return;

      const text = msg.text;
      const messageId = msg.message_id;

      console.log(`üì¢ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ: ${text.substring(0, 100)}...`);

      // –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
      const property = this.parseProperty(text);
      
      if (property) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await DatabaseService.saveProperty(
          messageId,
          text,
          property.type,
          property.rooms,
          property.price,
          property.area
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        this.properties.set(messageId, property);
        
        console.log(`‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${property.type} ${property.rooms} –∫–æ–º–Ω–∞—Ç, ${property.price}$`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error);
    }
  }

  parseProperty(text) {
    try {
      const lowerText = text.toLowerCase();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
      let type = 'unknown';
      if (lowerText.includes('apartment') || lowerText.includes('–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç') || lowerText.includes('–∫–≤–∞—Ä—Ç–∏—Ä')) {
        type = 'apartment';
      } else if (lowerText.includes('villa') || lowerText.includes('–≤–∏–ª–ª') || lowerText.includes('–¥–æ–º')) {
        type = 'villa';
      } else if (lowerText.includes('rent') || lowerText.includes('–∞—Ä–µ–Ω–¥') || lowerText.includes('—Å–Ω—è—Ç—å')) {
        type = 'rent';
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
      let rooms = null;
      const roomPatterns = [
        /(\d+)\s*(bed|room|–∫–æ–º–Ω–∞—Ç|—Å–ø–∞–ª–µ–Ω)/i,
        /(\d+)\s*br/i,
        /(\d+)\s*bedroom/i
      ];
      
      for (const pattern of roomPatterns) {
        const match = text.match(pattern);
        if (match) {
          rooms = parseInt(match[1]);
          break;
        }
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
      let price = null;
      const pricePatterns = [
        /\$(\d+(?:,\d{3})*(?:\.\d{2})?)/,
        /(\d+(?:,\d{3})*(?:\.\d{2})?)\s*usd/i,
        /(\d+(?:,\d{3})*(?:\.\d{2})?)\s*–¥–æ–ª–ª–∞—Ä/i,
        /(\d+(?:,\d{3})*(?:\.\d{2})?)\s*$/m
      ];
      
      for (const pattern of pricePatterns) {
        const match = text.match(pattern);
        if (match) {
          price = parseInt(match[1].replace(/,/g, ''));
          break;
        }
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–π–æ–Ω
      let area = null;
      const areaPatterns = [
        /in\s+([^,\n]+)/i,
        /–≤\s+([^,\n]+)/i,
        /area:\s*([^,\n]+)/i,
        /—Ä–∞–π–æ–Ω:\s*([^,\n]+)/i
      ];
      
      for (const pattern of areaPatterns) {
        const match = text.match(pattern);
        if (match) {
          area = match[1].trim();
          break;
        }
      }

      return {
        type,
        rooms,
        price,
        area,
        text: text.substring(0, 200) + (text.length > 200 ? '...' : '')
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
      return null;
    }
  }

  async getProperties(filters = {}) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const dbProperties = await DatabaseService.getProperties(filters);
      
      if (dbProperties.length > 0) {
        return dbProperties.map(prop => ({
          id: prop.id,
          messageId: prop.message_id,
          text: prop.text,
          type: prop.type,
          rooms: prop.rooms,
          price: prop.price,
          area: prop.area,
          parsedAt: prop.parsed_at
        }));
      }

      // –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
      return this.getSampleProperties(filters);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
      return this.getSampleProperties(filters);
    }
  }

  getSampleProperties(filters = {}) {
    const sampleProperties = [
      {
        id: 1,
        messageId: 1001,
        text: "üè† Beautiful 2-bedroom apartment in Sahl Hasheesh\nüí∞ Price: $45,000\nÔøΩÔøΩ Area: Sahl Hasheesh\nüõèÔ∏è 2 bedrooms, 2 bathrooms\n‚ú® Sea view, fully furnished",
        type: "apartment",
        rooms: 2,
        price: 45000,
        area: "Sahl Hasheesh",
        parsedAt: new Date().toISOString()
      },
      {
        id: 2,
        messageId: 1002,
        text: "üèñÔ∏è Luxury 3-bedroom villa in El Gouna\nüí∞ Price: $120,000\nÔøΩÔøΩ Area: El Gouna\nüõèÔ∏è 3 bedrooms, 3 bathrooms\nÔøΩÔøΩ Private pool, garden",
        type: "villa",
        rooms: 3,
        price: 120000,
        area: "El Gouna",
        parsedAt: new Date().toISOString()
      },
      {
        id: 3,
        messageId: 1003,
        text: "üè† Cozy 1-bedroom apartment for rent\nÔøΩÔøΩ Price: $400/month\nÔøΩÔøΩ Area: Hurghada Center\nüõèÔ∏è 1 bedroom, 1 bathroom\n‚ú® Near the beach",
        type: "rent",
        rooms: 1,
        price: 400,
        area: "Hurghada Center",
        parsedAt: new Date().toISOString()
      }
    ];

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    return sampleProperties.filter(prop => {
      if (filters.type && prop.type !== filters.type) return false;
      if (filters.rooms && prop.rooms !== parseInt(filters.rooms)) return false;
      if (filters.price_min && prop.price < parseInt(filters.price_min)) return false;
      if (filters.price_max && prop.price > parseInt(filters.price_max)) return false;
      return true;
    });
  }

  async searchProperties(query) {
    try {
      const properties = await this.getProperties();
      const lowerQuery = query.toLowerCase();
      
      return properties.filter(prop => 
        prop.text.toLowerCase().includes(lowerQuery) ||
        prop.area?.toLowerCase().includes(lowerQuery) ||
        prop.type?.toLowerCase().includes(lowerQuery)
      );
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
      return [];
    }
  }
}

module.exports = new TelegramChannelService();
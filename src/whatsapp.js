const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');

class WhatsAppService {
  constructor() {
    this.client = new Client({
      authStrategy: new LocalAuth({
        clientId: "whatsapp-client"
      }),
      puppeteer: {
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
      }
    });
    
    this.setupEvents();
  }

  setupEvents() {
    this.client.on('qr', (qr) => {
      console.log('üì± WhatsApp QR Code:');
      qrcode.generate(qr, {small: true});
      console.log('–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –≤ WhatsApp –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ');
    });

    this.client.on('ready', () => {
      console.log('‚úÖ WhatsApp –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤!');
    });

    this.client.on('message', (message) => {
      this.handleMessage(message);
    });

    this.client.on('auth_failure', (msg) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WhatsApp:', msg);
    });

    this.client.on('disconnected', (reason) => {
      console.log('‚ö†Ô∏è WhatsApp –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
    });
  }

  async handleMessage(message) {
    try {
      const contact = await message.getContact();
      const userInfo = {
        name: contact.name || contact.pushname || 'Unknown',
        phone: contact.number
      };

      console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ WhatsApp –æ—Ç ${userInfo.name}: ${message.body}`);

      // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
      if (global.io) {
        global.io.emit('incomingMessage', {
          channel: 'whatsapp',
          userId: message.from,
          message: message.body,
          userInfo: userInfo,
          timestamp: Date.now()
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è WhatsApp:', error);
    }
  }

  async sendMessage(to, message) {
    try {
      await this.client.sendMessage(to, message);
      console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ WhatsApp ${to}: ${message}`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ WhatsApp:', error);
      return false;
    }
  }

  async initialize() {
    try {
      await this.client.initialize();
      console.log('WhatsApp –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WhatsApp:', error);
    }
  }
}

module.exports = WhatsAppService;